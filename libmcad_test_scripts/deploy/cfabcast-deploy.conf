include "application"

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 10s
  # To turn off logging
  #stdout-loglevel = "OFF"
  #loglevel = "OFF"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "ERROR"
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serialize-messages = on
   
    # TODO: use protobuf or kryo
    serializers {
      cfabcaster = "cfabcast.serialization.CFABCastSerializer"
    }

    serialization-bindings {
      "cfabcast.messages.CFABCastMessage" = cfabcaster
    }

  }

  remote {
    transport = "akka.remote.netty.NettyRemoteTransport"
    log-sent-messages = off
    log-received-messages = off
    log-remote-lifecycle-events = on
  }

  cluster {
    roles = [cfabcast]

    # Set seed node in a enviromment variable
    seed-nodes = [
      "akka.tcp://CFABCastSystem@node42:2551",
      "akka.tcp://CFABCastSystem@node43:2552",
      "akka.tcp://CFABCastSystem@node44:2553",
      "akka.tcp://CFABCastSystem@node45:2554",
      "akka.tcp://CFABCastSystem@node46:2555",
      "akka.tcp://CFABCastSystem@node47:2556",
      "akka.tcp://CFABCastSystem@node48:2557",
      "akka.tcp://CFABCastSystem@node49:2558",
      "akka.tcp://CFABCastSystem@node50:2559",
      "akka.tcp://CFABCastSystem@node51:2560",
      "akka.tcp://CFABCastSystem@node52:2561"
    ]

    auto-down-unreachable-after = off

    extensions = ["akka.contrib.pattern.ClusterReceptionistExtension"]
  }

#  persistence {
#     journal.plugin = "akka.persistence.journal.leveldb-shared"
#     journal.leveldb-shared.store {
        # FIXME: DO NOT USE 'native = off' IN PRODUCTION !
#        native = off
#        dir = "target/shared-journal"
#     }
#     snapshot-store.local.dir = "target/snapshots"
#  }
}

cfabcast {
  # TODO
  # group 
  # leaderElection 
  # collisionFastProposer
  # quorum

  # Minimum required number of nodes before start computation
  min-nr-of-nodes = 1
  
  node-id = ""

  role {
    # Minimum required number of agents of a certain role before start the protocol
    # E.g. to require 2 agents with role 'cfproposer' and 3 agents with role 'acceptor':
    #   cfproposer.min-nr-of-agents = 2
    #   acceptor.min-nr-of-agents = 3
    #
    #<role-name>.min-nr-of-agents = 1
    
    cfproposer.min-nr-of-agents = 10

    # Determines the Quorum size
    acceptor.min-nr-of-agents = 10
  }

  nodes {
    # Per node configuration  
    node42 {
      hostname = "node42"
      port = 2551
      roles = [proposer, acceptor, learner]
      # Number of agents that play a certain role in this node.
      # E.g. to specify a node that play the role of 1 proposer and 1 learner:
      #  proposer.nr-of-agents  = 1
      #  acceptor.nr-of-agents  = 0
      #  learner.nr-of-agents   = 1
      proposer {
        nr-of-agents  = 1
        proposer1.id = "p1"
      }

      learner {
        nr-of-agents   = 1
        learner1.id = "l1"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor1.id = "a1"
      }
    }
  
    node43 {
      hostname = "node43"
      port = 2552
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer2.id = "p2"
      }

      learner {
        nr-of-agents   = 1
        learner2.id = "l2"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor2.id = "a2"
      }
    }
  
    node44 {
      hostname = "node44"
      port = 2553
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer3.id = "p3"
      }

      learner {
        nr-of-agents   = 1
        learner3.id = "l3"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor3.id = "a3"
      }
    }
    node45 {
      hostname = "node45"
      port = 2554
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer4.id = "p4"
      }

      learner {
        nr-of-agents   = 1
        learner4.id = "l4"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor4.id = "a4"
      }
    }
    node46 {
      hostname = "node46"
      port = 2555
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer5.id = "p5"
      }

      learner {
        nr-of-agents   = 1
        learner5.id = "l5"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor5.id = "a5"
      }
    }

    node47 {
      hostname = "node47"
      port = 2556
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer6.id = "p6"
      }

      learner {
        nr-of-agents   = 1
        learner6.id = "l6"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor6.id = "a6"
      }
    }

    node48 {
      hostname = "node48"
      port = 2557
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer7.id = "p7"
      }

      learner {
        nr-of-agents   = 1
        learner7.id = "l7"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor7.id = "a7"
      }
    }

    node49 {
      hostname = "node49"
      port = 2558
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer8.id = "p8"
      }

      learner {
        nr-of-agents   = 1
        learner8.id = "l8"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor8.id = "a8"
      }
    }

    node50 {
      hostname = "node50"
      port = 2559
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer9.id = "p9"
      }

      learner {
        nr-of-agents   = 1
        learner9.id = "l9"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor9.id = "a9"
      }
    }

    node51 {
      hostname = "node51"
      port = 2560
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer10.id = "p10"
      }

      learner {
        nr-of-agents   = 1
        learner10.id = "l10"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor10.id = "a10"
      }
    }
    node52 {
      hostname = "node52"
      port = 2561
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer11.id = "p11"
      }

      learner {
        nr-of-agents   = 1
        learner11.id = "l11"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor11.id = "a11"
      }
    }
  }
}
