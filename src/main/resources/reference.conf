# The roles played by agents of this node. 
akka.cluster.roles = [cfabcast]

cfabcast {
  # TODO
  # group 
  # leaderElection 
  # collisionFastProposer
  # quorum

  # Minimum required number of nodes before start computation
  min-nr-of-nodes = 1
  
  node-id = ""

  role {
    # Minimum required number of agents of a certain role before start the protocol
    # E.g. to require 2 agents with role 'cfproposer' and 3 agents with role 'acceptor':
    #   cfproposer.min-nr-of-agents = 2
    #   acceptor.min-nr-of-agents = 3
    #
    #<role-name>.min-nr-of-agents = 1
    
    cfproposer.min-nr-of-agents = 2

    # Determines the Quorum size
    acceptor.min-nr-of-agents = 3
  }

  nodes {
    # Per node configuration  
    node1 {
      hostname = "127.0.0.1"
      port = 2551
      roles = [proposer, acceptor, learner]
      # Number of agents that play a certain role in this node.
      # E.g. to specify a node that play the role of 1 proposer and 1 learner:
      #  proposer.nr-of-agents  = 1
      #  acceptor.nr-of-agents  = 0
      #  learner.nr-of-agents   = 1
      proposer {
        nr-of-agents  = 1
        proposer1.id = "p1"
      }

      learner {
        nr-of-agents   = 1
        learner1.id = "l1"
      }

      acceptor {
        nr-of-agents  = 2
        acceptor1.id = "a1"
        acceptor2.id = "a2"
      }
    }
  
    node2 {
      hostname = "127.0.0.1"
      port = 2552
      roles = [proposer, acceptor, learner]
      proposer {
        nr-of-agents  = 1
        proposer2.id = "p2"
      }

      learner {
        nr-of-agents   = 1
        learner2.id = "l2"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor3.id = "a3"
      }
    }
  
    node3 {
      hostname = "127.0.0.1"
      port = 2553
      roles = [acceptor, learner]
      proposer.nr-of-agents  = 0

      learner {
        nr-of-agents   = 1
        learner3.id = "l3"
      }

      acceptor {
        nr-of-agents  = 1
        acceptor4.id = "a4"
      }
    }
  }
}
